call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" ----- Making Vim look good ------------------------------------------
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ----- Vim as a programmer's text editor -----------------------------
Plug 'preservim/nerdtree'
"Plug 'Valloric/YouCompleteMe'
" nerdtree的插件加强插件
Plug 'jistr/vim-nerdtree-tabs'
"Plug 'scrooloose/syntastic'
"Plug 'xolox/vim-misc'
"Plug 'xolox/vim-easytags'
Plug 'preservim/tagbar'
"Plug 'kien/ctrlp.vim'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'vim-scripts/a.vim'

" ----- Working with Git ----------------------------------------------
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" ----- Other text editing features -----------------------------------
"  符号补全
Plug 'Raimondi/delimitMate'

" ----- man pages, tmux -----------------------------------------------
"Plug 'jez/vim-superman'
"Plug 'christoomey/vim-tmux-navigator'

" ----- Syntax plugins ------------------------------------------------
"Plug 'jez/vim-c0'
"Plug 'jez/vim-ispc'
"Plug 'kchmck/vim-coffee-script'

" ---- Extras/Advanced plugins ----------------------------------------
" Highlight and strip trailing whitespace
"Plug 'ntpeters/vim-better-whitespace'
" Easily surround chunks of text
"Plug 'tpope/vim-surround'
" Align CSV files at commas, align Markdown tables, and more
"Plug 'godlygeek/tabular'
" Automaticall insert the closing HTML tag
"Plug 'HTML-AutoCloseTag'
" Make tmux look like vim-airline (read README for extra instructions)
"Plug 'edkolev/tmuxline.vim'
" All the other syntax plugins I use
"Plug 'ekalinin/Dockerfile.vim'
"Plug 'digitaltoad/vim-jade'
"Plug 'tpope/vim-liquid'
"Plug 'cakebaker/scss-syntax.vim'
"-------------------------------------------------------------------------
"dragonwei add:
" 快速注释
"Plug 'scrooloose/nerdcommenter'
"Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
"-------------------------------------------------------------------------
Plug 'fatih/vim-go'

"-------------------------------------------------------------------------
"switching between companion files
Plug 'jlanzarotta/bufexplorer'

Plug 'rhysd/vim-clang-format'

call plug#end()

" -------------------------- General settings ----------------------------

"set term=xterm-256color
set t_Co=256
" filetype  off

filetype plugin indent on

" set the select color of vim 
"hi IncSearch term=standout ctermfg=0 ctermbg=3
" 高亮光标所在行
"hi CursorColumn term=standout ctermfg=0 ctermbg=3
"hi StatusLine term=standout ctermfg=0 ctermbg=3
" 是否需要放在配置的最开始
set nocompatible
" 设置backspace作为删除键
set backspace=indent,eol,start
set hidden
" 底部的行号等显示
set ruler
"set number
set showcmd
set incsearch
set hlsearch
set ic

syntax on
set autoindent
set cindent
set cursorline
"syntax enable
"远程登陆时关闭,否则不支持鼠标复制粘贴
"set mouse=a

set tabstop=2
set shiftwidth=2
set expandtab

set enc=utf8
set fencs=utf8,gbk,gb2312,gb18030,cp936

" 命令行（在状态行下）的高度，设置为1
" set cmdheight=2

" ---------------------- derekwyatt/vim-fswitch ------------
" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :AS<cr>

" ------------system clipboard -----------
set clipboard=unnamed
"nmap <Leader>y "*y"<cr>
"vmap <Leader>y "*y"<cr>
"nmap <Leader>p "*p"<cr>  leader p 已经使用了

" ---------------------- bufExplorer -----------------------
"let g:bufExplorerDefaultHelp=0       " Do not show default help.
"let g:bufExplorerShowRelativePath=1  " Show relative paths.
"let g:bufExplorerSortBy='mru'        " Sort by most recently used.


" ---------------------- altercation/vim-colors-solarized settings -----
" Toggle this to "light" for light colorscheme
"set background=dark
" Uncomment the next line if your terminal is not configured for solarized
"let g:solarized_termcolors=256

" Set the colorscheme
"colorscheme solarized
colorscheme molokai

" ---------------------- bling/vim-airline settings -----
" Always show statusbar
set laststatus=2

" Fancy arrow symbols, requires a patched font
" To install a patched font, run over to
"     https://github.com/abertsch/Menlo-for-Powerline
" download all the .ttf files, double-click on them and click "Install"
" Finally, uncomment the next line
"let g:airline_powerline_fonts = 1

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_warning = 0

" ------------------------ jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
" nmap <silent> <leader>\t :NERDTreeTabsToggle<CR>
nmap <leader>n :NERDTreeTabsToggle<CR>
" To have NERDTree always open on startup
let g:nerdtree_tabs_open_on_console_startup = 0
let g:nerdtree_tabs_autofind = 1


" ------------------------ majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <leader>m :TagbarToggle<CR>
let g:tagbar_sort = 0
" let tagbar refresh faster
set updatetime=100
"let g:tagbar_ctags_bin = 'ctags' 
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)


" ------------------------ airblade/vim-gitgutter settings -----
" Required after having changed the colorscheme
"hi clear SignColumn
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1


" ----- Raimondi/delimitMate settings -----
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

autocmd FileType json syntax match Comment +\/\/.\+$+
" 补全选项 completeopt
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

nmap <silent> <C-n> <Plug>(coc-diagnostic-prev)
nmap <silent> <C-m> <Plug>(coc-diagnostic-next)
" Show all diagnostics.
nnoremap <silent><nowait> <leader>ba  :<C-u>CocDiagnostics<cr>

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)
"nmap <silent>fm <Plug>(coc-format) 
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json,cc,c++ setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <leader>v :vs <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>p :echo expand('%:p')<CR>
nmap <leader>ss :mksession! /tmp/.session.vim<CR>
nmap <leader>kk :source /tmp/.session.vim<CR>
nmap <leader>vm :vs /data/mm64/harleyhuang/QQMail/mmproto/csproto/finder<CR>
nmap <leader>vg :vs /data/mm64/harleyhuang/QQMail/mmgateway/public/proto/mmfinder<CR>
nmap <leader>no :set wrapscan<CR>
nmap <leader>nc :set nowrapscan<CR>

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") |  exe "normal! g'\"" | endif


"let mapleader = "\<Space>" "
map <leader>h <F1> 
map <leader>w :set wrap<CR>

"let g:clang_format#auto_format_on_insert_leave=1
"let g:clang_format#auto_format=1
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><C-K> :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><C-K> :ClangFormat<CR>

let g:Lf_ShortcutF = "<C-P>"
let g:Lf_HideHelp = 1
let g:Lf_WorkingDirectoryMode = 'A'
let g:Lf_RootMarkers = ['.git']
"let g:Lf_UseVersionControlTool=1 "这个是默认选项, 可以不写"
let g:Lf_DefaultExternalTool='rg'
"let g:Lf_FollowLinks=1
"let g:Lf_WorkingDirectory = '/home/harleyhuang/QQMail'

"noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
noremap <leader>ff :<C-U><C-R>=printf("Leaderf function %s", "")<CR><CR>

"let g:Lf_PreviewResult = {'Rg': 1 }
" search word under cursor, the pattern is treated as regex, and enter normal mode directly
" --stayOpen
noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg --stayOpen -w -F -e %s /home/harleyhuang/QQMail/micromsg /home/harleyhuang/QQMail/mmgateway", expand("<cword>"))<CR>

" append the result to previous search results.
"noremap <C-G> :<C-U><C-R>=printf("Leaderf! rg --append -e %s ", expand("<cword>"))<CR>

" search word under cursor literally in all listed buffers
"noremap <C-G> :<C-U><C-R>=printf("Leaderf! rg -F --all-buffers -e %s ", expand("<cword>"))<CR>
noremap <C-G> :<C-U><C-R>=printf("Leaderf! rg --stayOpen -w --wd-mode=f -F -e %s ", expand("<cword>"))<CR>

" recall last search. If the result window is closed, reopen it.
noremap <leader>go :<C-U>Leaderf! rg --recall<CR>

"解决coc.nvim大文件卡死状况
let g:trigger_size = 0.5 * 1048576

augroup hugefile
  autocmd!
  autocmd BufReadPre *
        \ let size = getfsize(expand('<afile>')) |
        \ if (size > g:trigger_size) || (size == -2) |
        \   echohl WarningMsg | echomsg 'WARNING: altering options for this huge file!' | echohl None |
        \   exec 'CocDisable' |
        \ else |
        \   exec 'CocEnable' |
        \ endif |
        \ unlet size
augroup END

